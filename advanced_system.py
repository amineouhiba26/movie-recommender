#!/usr/bin/env python3
"""
Syst√®me de recommandation de films avanc√©
Int√®gre tous les composants am√©lior√©s
"""

import json
import argparse
from pathlib import Path
import time

def main():
    """Interface principale pour les am√©liorations"""
    parser = argparse.ArgumentParser(description="Syst√®me de Recommandation de Films Avanc√©")
    parser.add_argument('--demo', choices=['expansion', 'notation', 'hybride', 'temps-reel', 'tout'], 
                       help='Lancer une d√©monstration')
    parser.add_argument('--expand', action='store_true', help='√âlargir la base de donn√©es')
    parser.add_argument('--api-key', type=str, help='Cl√© API TMDB pour l\'expansion')
    parser.add_argument('--target-size', type=int, default=500, 
                       help='Taille cible pour l\'expansion (d√©faut: 500)')
    
    args = parser.parse_args()
    
    print("üé¨ Syst√®me de Recommandation de Films Avanc√©")
    print("=" * 50)
    
    if args.demo:
        run_demos(args.demo)
    elif args.expand:
        expand_database(args.api_key, args.target_size)
    else:
        show_menu()

def show_menu():
    """Affiche le menu principal"""
    print("""
Am√©liorations disponibles:

1. üìà √âlargissement de la base de donn√©es
   - Ajouter des milliers de films depuis TMDB
   - Diversifier les genres et √©poques
   
2. ‚≠ê Syst√®me de notation utilisateur
   - Permettre aux utilisateurs de noter les films
   - Analyser les pr√©f√©rences individuelles
   
3. üîÄ Filtrage hybride
   - Combiner recommandations de contenu et collaboratives
   - Am√©liorer la pr√©cision des suggestions
   
4. ‚ö° Mises √† jour temps r√©el
   - Adapter les mod√®les automatiquement
   - Apprentissage continu des pr√©f√©rences

Utilisation:
  python advanced_system.py --demo tout              # Toutes les d√©mos
  python advanced_system.py --demo expansion         # D√©mo expansion
  python advanced_system.py --expand --api-key XXX   # √âlargir la DB
""")

def run_demos(demo_type):
    """Lance les d√©monstrations"""
    print(f"üé≠ Lancement de la d√©monstration: {demo_type}")
    
    if demo_type == 'expansion' or demo_type == 'tout':
        print("\n" + "="*50)
        print("üìà D√âMONSTRATION: √âlargissement de la base de donn√©es")
        print("="*50)
        
        try:
            from data_expander import demo_expansion
            demo_expansion()
        except ImportError:
            print("‚ùå Module data_expander non trouv√©")
        except Exception as e:
            print(f"‚ùå Erreur d√©monstration expansion: {e}")
    
    if demo_type == 'notation' or demo_type == 'tout':
        print("\n" + "="*50)
        print("‚≠ê D√âMONSTRATION: Syst√®me de notation")
        print("="*50)
        
        try:
            from user_rating_system import demo_rating_system
            demo_rating_system()
        except ImportError:
            print("‚ùå Module user_rating_system non trouv√©")
        except Exception as e:
            print(f"‚ùå Erreur d√©monstration notation: {e}")
    
    if demo_type == 'hybride' or demo_type == 'tout':
        print("\n" + "="*50)
        print("üîÄ D√âMONSTRATION: Syst√®me hybride")
        print("="*50)
        
        try:
            from hybrid_recommender import demo_hybrid_system
            demo_hybrid_system()
        except ImportError:
            print("‚ùå Module hybrid_recommender non trouv√©")
        except Exception as e:
            print(f"‚ùå Erreur d√©monstration hybride: {e}")
    
    if demo_type == 'temps-reel' or demo_type == 'tout':
        print("\n" + "="*50)
        print("‚ö° D√âMONSTRATION: Syst√®me temps r√©el")
        print("="*50)
        
        try:
            from realtime_updater import demo_realtime_system
            demo_realtime_system()
        except ImportError:
            print("‚ùå Module realtime_updater non trouv√©")
        except Exception as e:
            print(f"‚ùå Erreur d√©monstration temps r√©el: {e}")

def expand_database(api_key, target_size):
    """√âlargit la base de donn√©es"""
    print(f"üìà √âlargissement de la base de donn√©es vers {target_size} films...")
    
    try:
        from data_expander import MovieDataExpander
        
        expander = MovieDataExpander(api_key)
        
        if api_key:
            expanded_movies = expander.expand_dataset(target_size)
            expander.save_expanded_dataset(expanded_movies)
            print(f"‚úÖ Base de donn√©es √©largie √† {len(expanded_movies)} films")
        else:
            print("‚ö†Ô∏è  Aucune cl√© API fournie, cr√©ation d'un √©chantillon...")
            sample_movies = expander.create_sample_expansion()
            expander.save_expanded_dataset(sample_movies, 'movies_dataset_sample.json')
            print(f"‚úÖ √âchantillon cr√©√© avec {len(sample_movies)} films")
    
    except ImportError:
        print("‚ùå Module data_expander non trouv√©")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'expansion: {e}")

def setup_advanced_system():
    """Configure le syst√®me avanc√© complet"""
    print("üîß Configuration du syst√®me avanc√©...")
    
    # Cr√©er les dossiers n√©cessaires
    Path('models').mkdir(exist_ok=True)
    Path('models/backups').mkdir(exist_ok=True)
    Path('data/processed').mkdir(parents=True, exist_ok=True)
    
    print("‚úÖ Dossiers cr√©√©s")
    
    # V√©rifier les d√©pendances
    required_modules = [
        'movie_recommender',
        'user_rating_system', 
        'hybrid_recommender',
        'realtime_updater',
        'data_expander'
    ]
    
    missing_modules = []
    for module in required_modules:
        try:
            __import__(module)
        except ImportError:
            missing_modules.append(module)
    
    if missing_modules:
        print(f"‚ö†Ô∏è  Modules manquants: {missing_modules}")
    else:
        print("‚úÖ Tous les modules sont disponibles")
    
    return len(missing_modules) == 0

def create_demo_data():
    """Cr√©e des donn√©es de d√©monstration"""
    print("üé≠ Cr√©ation de donn√©es de d√©monstration...")
    
    try:
        from user_rating_system import UserRatingSystem
        
        rating_system = UserRatingSystem()
        
        # Cr√©er des utilisateurs et notes de test
        demo_users = ['alice', 'bob', 'charlie', 'diana']
        demo_ratings = [
            ('alice', 157336, 9.0),   # Interstellar
            ('alice', 335984, 8.5),   # Blade Runner 2049
            ('alice', 244786, 7.0),   # Whiplash
            ('bob', 157336, 7.5),     # Interstellar
            ('bob', 155, 9.0),        # The Dark Knight
            ('bob', 27205, 8.0),      # Inception
            ('charlie', 244786, 9.5), # Whiplash
            ('charlie', 346698, 8.0), # Barbie
            ('charlie', 157336, 6.0), # Interstellar
            ('diana', 155, 8.8),      # The Dark Knight
            ('diana', 27205, 9.2),    # Inception
            ('diana', 335984, 8.0),   # Blade Runner 2049
        ]
        
        for user_id, movie_id, rating in demo_ratings:
            rating_system.add_rating(user_id, movie_id, rating)
        
        print(f"‚úÖ {len(demo_ratings)} notes de d√©monstration cr√©√©es")
        print(f"üë• {len(demo_users)} utilisateurs de test")
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation donn√©es d√©mo: {e}")

def run_integration_test():
    """Lance un test d'int√©gration complet"""
    print("üß™ Test d'int√©gration du syst√®me avanc√©")
    print("=" * 40)
    
    try:
        # 1. Syst√®me de base
        print("1Ô∏è‚É£  Test du syst√®me de base...")
        from movie_recommender import MovieRecommender
        recommender = MovieRecommender()
        basic_recs = recommender.recommend_by_title("Interstellar", 3)
        print(f"   ‚úÖ {len(basic_recs)} recommandations de base")
        
        # 2. Syst√®me de notation
        print("2Ô∏è‚É£  Test du syst√®me de notation...")
        from user_rating_system import UserRatingSystem
        rating_system = UserRatingSystem()
        rating_system.add_rating('test_user', 157336, 8.5)
        user_prefs = rating_system.get_user_preferences('test_user')
        print(f"   ‚úÖ Pr√©f√©rences utilisateur calcul√©es")
        
        # 3. Syst√®me hybride
        print("3Ô∏è‚É£  Test du syst√®me hybride...")
        from hybrid_recommender import HybridRecommendationSystem
        hybrid_system = HybridRecommendationSystem(recommender, rating_system)
        hybrid_recs = hybrid_system.get_hybrid_recommendations('test_user', num_recommendations=3)
        print(f"   ‚úÖ {len(hybrid_recs)} recommandations hybrides")
        
        # 4. Syst√®me temps r√©el
        print("4Ô∏è‚É£  Test du syst√®me temps r√©el...")
        from realtime_updater import RealTimeModelUpdater
        updater = RealTimeModelUpdater(hybrid_system, rating_system, update_interval=5)
        status = updater.get_system_status()
        print(f"   ‚úÖ Syst√®me temps r√©el initialis√©")
        
        print("\nüéâ Tous les tests d'int√©gration r√©ussis!")
        return True
        
    except Exception as e:
        print(f"‚ùå √âchec du test d'int√©gration: {e}")
        return False

if __name__ == "__main__":
    # Configuration initiale
    if setup_advanced_system():
        main()
    else:
        print("‚ùå Configuration incompl√®te. V√©rifiez les modules manquants.")
