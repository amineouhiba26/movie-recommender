#!/usr/bin/env python3
"""
Script de d√©marrage pour le syst√®me de recommandation avanc√©
S'assure que tous les composants sont correctement initialis√©s
"""

import os
import sys
import json
from pathlib import Path
import subprocess

def check_dataset():
    """V√©rifie que le dataset de base existe"""
    if not Path('movies_dataset.json').exists():
        print("‚ùå Dataset manquant: movies_dataset.json")
        return False
    
    try:
        with open('movies_dataset.json', 'r') as f:
            movies = json.load(f)
        print(f"‚úÖ Dataset trouv√©: {len(movies)} films")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lecture dataset: {e}")
        return False

def check_artifacts():
    """V√©rifie et cr√©e les artifacts si n√©cessaire"""
    artifacts_path = Path('artifacts')
    required_files = [
        'similarity_matrix.npy',
        'tfidf_vectorizer.pkl',
        'genre_encoder.pkl',
        'movie_metadata.json'
    ]
    
    missing_files = []
    if not artifacts_path.exists():
        artifacts_path.mkdir()
        missing_files = required_files
    else:
        for file in required_files:
            if not (artifacts_path / file).exists():
                missing_files.append(file)
    
    if missing_files:
        print(f"‚ö†Ô∏è  Artifacts manquants: {missing_files}")
        print("üîÑ Ex√©cution du preprocessing...")
        
        try:
            from preprocess_movies import preprocess_movies
            preprocess_movies(apply_svd=False)
            print("‚úÖ Preprocessing termin√©")
            return True
        except Exception as e:
            print(f"‚ùå Erreur preprocessing: {e}")
            return False
    else:
        print("‚úÖ Tous les artifacts pr√©sents")
        return True

def test_components():
    """Test rapide des composants principaux"""
    print("üß™ Test des composants...")
    
    # Test recommandeur de base
    try:
        from movie_recommender import MovieRecommender
        recommender = MovieRecommender()
        test_recs = recommender.recommend_by_title("Interstellar", 3)
        print("‚úÖ Recommandeur de base: OK")
    except Exception as e:
        print(f"‚ùå Recommandeur de base: {e}")
        return False
    
    # Test syst√®me de notation (optionnel)
    try:
        from user_rating_system import UserRatingSystem
        rating_system = UserRatingSystem()
        print("‚úÖ Syst√®me de notation: OK")
    except Exception as e:
        print(f"‚ö†Ô∏è  Syst√®me de notation: {e}")
    
    # Test syst√®me hybride (optionnel)
    try:
        from hybrid_recommender import HybridRecommendationSystem
        hybrid_system = HybridRecommendationSystem(recommender, rating_system)
        print("‚úÖ Syst√®me hybride: OK")
    except Exception as e:
        print(f"‚ö†Ô∏è  Syst√®me hybride: {e}")
    
    return True

def create_demo_data():
    """Cr√©e des donn√©es de d√©monstration pour les tests"""
    try:
        from user_rating_system import UserRatingSystem
        rating_system = UserRatingSystem()
        
        # Quelques notes de test
        test_ratings = [
            ('demo_user', 157336, 9.0),   # Interstellar
            ('demo_user', 155, 8.5),      # The Dark Knight
            ('demo_user', 27205, 8.0),    # Inception
        ]
        
        for user_id, movie_id, rating in test_ratings:
            rating_system.add_rating(user_id, movie_id, rating)
        
        print("‚úÖ Donn√©es de d√©monstration cr√©√©es")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur cr√©ation donn√©es d√©mo: {e}")

def main():
    """Fonction principale de setup"""
    print("üé¨ Configuration du Syst√®me de Recommandation Avanc√©")
    print("=" * 55)
    
    # V√©rifications
    if not check_dataset():
        print("‚ùå Dataset requis non trouv√©")
        return False
    
    if not check_artifacts():
        print("‚ùå Probl√®me avec les artifacts")
        return False
    
    if not test_components():
        print("‚ùå Probl√®me avec les composants")
        return False
    
    # Cr√©ation des donn√©es de d√©mo
    create_demo_data()
    
    print("\nüéâ Syst√®me pr√™t!")
    print("=" * 55)
    print("üìù Pour d√©marrer l'application:")
    print("   streamlit run streamlit_app.py")
    print("\nüîß Pour les d√©mos avanc√©es:")
    print("   python advanced_system.py --demo tout")
    print("\nüöÄ Pour d√©ployer:")
    print("   - Commitez et pushez vers GitHub")
    print("   - Connectez √† Streamlit Cloud")
    print("   - L'app sera automatiquement d√©ploy√©e!")
    
    return True

if __name__ == "__main__":
    if main():
        sys.exit(0)
    else:
        sys.exit(1)
